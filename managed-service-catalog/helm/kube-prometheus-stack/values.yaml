namespace: {}
secretStoreRef:
  kind: changeme
  name: changeme
kube-prometheus-stack:
  global:
    imageRegistry: changeme
  defaultRules:
    disabled:
      #NodeClockNotSynchronising: true
      KubeCPUOvercommit: true
      #KubeMemoryOvercommit: true
  # kubeControllerManager, kubeScheduler, kubeEtcd and kubeProxy are not reachable in cloud provider, they must be deactivated, because otherwise there alerts fire continuously
  # see: https://github.com/prometheus-operator/kube-prometheus/issues/1530
  kubeControllerManager:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  kubeEtcd:
    enabled: false
  prometheusOperator:
    resources:
      requests:
        cpu: 10m
        memory: 100Mi
      limits:
        memory: 100Mi
    serviceMonitor:
      additionalLabels:
        monitoring.instance: changeme
    admissionWebhooks:
      annotations:
        argocd.argoproj.io/hook: PreSync
        argocd.argoproj.io/hook-delete-policy: HookSucceeded
      certManager:
        enabled: true
    prometheusConfigReloader:
      resources:
        requests:
          cpu: 10m
          memory: 100Mi
        limits:
          memory: 100Mi
      securityContext:
        runAsGroup: 65534
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containerSecurityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop:
            - ALL
  prometheus-node-exporter:
    enabled: true
    prometheus:
      monitor:
        enabled: true
        additionalLabels:
          monitoring.instance: changeme
    resources:
      requests:
        cpu: 10m
        memory: 100Mi
      limits:
        memory: 100Mi
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
  prometheus:
    ingress:
      enabled: false
    serviceMonitor:
      additionalLabels:
        monitoring.instance: changeme
    prometheusSpec:
      resources:
        requests:
          cpu: 57m
          memory: 700Mi
        limits:
          memory: 700Mi
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      externalUrl: changeme
      routePrefix: changeme
      podAntiAffinity: "hard"
      # get podmonitors, servicemonitors and rules from all Namespaces, see https://github.com/prometheus-community/helm-charts/issues/106
      podMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelector:
        matchLabels:
          monitoring.instance: changeme
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: changeme
  alertmanager:
    ingress:
      enabled: false
    alertmanagerSpec:
      podAntiAffinity: "hard"
      externalUrl: changeme
      routePrefix: changeme
      resources:
        requests:
          cpu: 10m
          memory: 100Mi
        limits:
          memory: 100Mi
      securityContext:
        fsGroup: 2000
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
  grafana:
    ingress:
      enabled: false
    enabled: true
    serviceMonitor:
      labels:
        monitoring.instance: changeme
    resources:
      requests:
        cpu: 10m
        memory: 200Mi
      limits:
        memory: 200Mi
    securityContext:
      runAsUser: 472
      runAsGroup: 472
      fsGroup: 472
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      runAsNonRoot: true
      runAsUser: 472
      runAsGroup: 472
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    initChownData:
      resources:
        requests:
          cpu: 10m
          memory: 150Mi
        limits:
          memory: 150Mi
      securityContext:
        readOnlyRootFilesystem: false
        runAsNonRoot: false
        runAsUser: 0
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          add:
            - CHOWN
          drop:
            - ALL
    sidecar:
      resources:
        requests:
          cpu: 10m
          memory: 150Mi
        limits:
          memory: 150Mi
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop:
            - ALL
  thanosRuler:
    enabled: false
  kubeStateMetrics:
    enabled: true
  kube-state-metrics:
    resources:
      requests:
        cpu: 10m
        memory: 100Mi
      limits:
        memory: 100Mi
    securityContext:
      enabled: true
      runAsGroup: 65534
      runAsUser: 65534
      fsGroup: 65534
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL


prometheus-blackbox-exporter:
  global:
    imageRegistry: changeme
  resources:
    requests:
      cpu: 10m
      memory: 100Mi
    limits:
      memory: 100Mi
  podSecurityContext:
    runAsNonRoot: true
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    privileged: false
    runAsUser: 1000
    runAsGroup: 1000
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ "ALL" ]
  config:
    modules:
      http_2xx:
        http:
          fail_if_ssl: false
          fail_if_not_ssl: false
          tls_config:
            insecure_skip_verify: true
